029. SƠN CỘT
Trên một nền phẳng đã được chia thành các lưới ô vuông đơn vị gồm mxn ô (m, n ≤ 100), người ta đặt chồng khít lên nhau các khối lập phương đơn vị thành những cột. Khối dưới cùng của cột chiếm trọn một ô của lưới. Chiều cao của mỗi cột được tính bằng số khối lập phương đơn vị tạo thành cột đó. Sau khi xếp xong toàn bộ các cột, người ta tiến hành sơn các mặt nhìn thấy được của các cột. 
Yêu cầu: Biết chiều cao của mỗi cột, hãy tính số đơn vị diện tích cần sơn. 

Dữ liệu vào đặt trong file văn bản PAINT.INP. Trong đó:
Dòng đầu tiên ghi hai số nguyên dương m, n là kích thước của lưới nền (m hàng, n cột) m dòng tiếp theo, dòng thứ i ghi n số nguyên không âm, số nguyên thứ j biểu thị chiều cao của cột dựng tại ô (i, j) của lưới. Các số cách nhau ít nhất một dấu cách. 

Kết quả ra đặt trong file văn bản PAINT.OUT, ghi số diện tích cần sơn. 

Ví dụ:

Với hình vẽ bên, các cột được xây trên nền kích thước 2x3. Các file dữ liệu vào và kết quả ra sẽ là:

Ý tưởng thực hiện:
** Ý tưởng chung:
	Ta cần xét các vị trí trên, dưới, trái phải, của mỗi mỗi cột, nếu nó cao hơn các vị trí xung quanh bao nhiêu thì cần sơn bấy nhiêu.
	Và cần tính cả mặt trên của cột nên giá trị được sơn cần phải cộng thêm số cột.
** Cụ thể hóa ý tưởng:
B1: 	Đầu tiên ta cần đọc file PAINT.INP để lấy được thông tin về lưới cột.
	Trong quá trình này cần tạo một đường viền bao xung quanh các cột với giá trị là 0 để tính cho trường hợp các cột ở biên. 
	Ở hàm đọc file (void readFile) đã cho vòng lặp chạy đến m+2 và n+2 để tạo biên, dòng if số 12 để kiểm tra biến vị trí có đang ở viền hay không và gán giá trị 0 hoặc đọc giá trị từ file nếu không nằm ở viền bao quanh.
B2: 	Thao tác xử lý (void paint) bắt đầu từ việc gán biến tổng s=m*n với mục đích sơn trước các phần đỉnh cột.
	Kế đó, hai vòng lặp for lồng nhau chạy từ i=1, j=1 đến lần lượt m+1 và n+1 với mục đích duyệt qua mảng và bỏ qua phần đường viền đã tạo ở hàm đọc file phía trên. Lúc này các câu lệnh điều kiện thực hiện nhiệm vụ kiểm tra và xử lý:
	+ Nếu bên trái có cột cao hơn thì lấy cột trái trừ cột này, ta sẽ được số mặt bên trái của ô này.
	+ Nếu bên phải có cột cao hơn thì lấy cột phải trừ cột này, ta sẽ được số mặt bên phải của ô này.
	+ Làm tương tự với trước sau... như thế sẽ tìm đc số ô cần sơn bên mặt của tất cả các ô. Kết quả cộng dồn vào biến s (đã được sơn đỉnh cột từ đầu).
B3: 	Kết quả được tính sẽ được ghi vào file  PAINT.OUT
Code minh họa:

 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
#include <iostream>

void readFile(int &m, int &n, int arr[1000][1000])
{
    FILE *f = fopen("PAINT.INP", "rt");
    fscanf(f, "%d", &m);
    fscanf(f, "%d", &n);
    for (int i = 0; i < m + 2; i++)
    {
        for (int j = 0; j < n + 2; j++)
        {
            if (i == 0 || i == m + 1 || j == 0 || j == n + 1)
                arr[i][j] = 0;
            else
                fscanf(f, "%d", &arr[i][j]);
        }
    }
    fclose(f);
}

void paint(int m, int n, int arr[1000][1000])
{
    int s = m * n;
    for (int i = 1; i < m + 1; i++)
    {
        for (int j = 1; j < n + 1; j++)
        {
            if (arr[i][j] > arr[i - 1][j])
                s += (arr[i][j] - arr[i - 1][j]);
            if (arr[i][j] > arr[i + 1][j])
                s += (arr[i][j] - arr[i + 1][j]);
            if (arr[i][j] > arr[i][j - 1])
                s += (arr[i][j] - arr[i][j - 1]);
            if (arr[i][j] > arr[i][j + 1])
                s += (arr[i][j] - arr[i][j + 1]);
        }
    }
    FILE *f = fopen("PAINT.OUT", "wt");
    fprintf(f, "%d", s);
    fclose(f);
}

int main()
{
    int m, n, arr[1000][1000];
    std::cout << "Bai 029 running...\n";
    readFile(m, n, arr);
    paint(m, n, arr);
    std::cout << "Success...\n";
    return 0;
}

